#!/usr/bin/env python3
"""
AI Expert Demonstration
Visar AI-Coachens nya AI-expertis funktionalitet
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def demonstrate_ai_knowledge():
    """Visa AI-kunskapsbasens inneh√•ll"""
    print("üß† AI-KUNSKAPSBASENS INNEH√ÖLL")
    print("=" * 50)
    
    try:
        from utils.ai_expert_knowledge import ai_expert_knowledge
        
        all_docs = ai_expert_knowledge.get_all_knowledge()
        
        # Gruppera efter kategori
        categories = {}
        for doc in all_docs:
            cat = doc['category']
            if cat not in categories:
                categories[cat] = []
            categories[cat].append(doc)
        
        for category, docs in categories.items():
            print(f"\nüìö {category.upper().replace('_', ' ')}")
            print("-" * 30)
            for i, doc in enumerate(docs, 1):
                print(f"   {i}. {doc['title']}")
                print(f"      Keywords: {', '.join(doc['keywords'][:3])}...")
        
        print(f"\n‚úÖ Total: {len(all_docs)} AI-expertis dokument i {len(categories)} kategorier")
        
    except Exception as e:
        print(f"‚ùå Fel: {e}")

def demonstrate_rag_intelligence():
    """Visa RAG-systemets intelligens"""
    print("\nüîç RAG-SYSTEMETS INTELLIGENS")
    print("=" * 50)
    
    try:
        from utils.rag_system import rag_system
        
        # Test cases f√∂r AI-fr√•ga identifiering
        test_queries = [
            ("Vad √§r machine learning?", True),
            ("Hur implementerar jag en transformer?", True), 
            ("AI transformation roadmap", True),
            ("Python f√∂r AI utveckling", True),
            ("Hej, vad heter du?", False),
            ("Vad tycker du om v√§dret?", False),
            ("Kan du hj√§lpa mig med matematik?", False)
        ]
        
        print("AI-FR√ÖGA IDENTIFIERING:")
        for query, expected in test_queries:
            is_ai = rag_system.is_ai_related_query(query)
            status = "‚úÖ" if is_ai == expected else "‚ùå"
            ai_indicator = "ü§ñ" if is_ai else "üí¨"
            print(f"   {status} {ai_indicator} '{query}' -> AI-relaterad: {is_ai}")
        
        # Test kontext-h√§mtning
        print(f"\nKONTEXT-H√ÑMTNING F√ñR AI-FR√ÖGOR:")
        ai_queries = [
            "Vad √§r deep learning?",
            "MLOps best practices", 
            "AI s√§kerhet och GDPR"
        ]
        
        for query in ai_queries:
            contexts = rag_system.retrieve_relevant_context(query)
            print(f"\nüîç '{query}':")
            if contexts:
                for i, ctx in enumerate(contexts[:2], 1):  # Visa bara top 2
                    print(f"   {i}. {ctx.title} (Score: {ctx.relevance_score:.2f})")
                    print(f"      Kategori: {ctx.category}")
            else:
                print("   Inga relevanta kontexter hittade")
        
    except Exception as e:
        print(f"‚ùå Fel: {e}")

def demonstrate_expertise_levels():
    """Visa expertis-niv√• detektering"""
    print("\nüéØ EXPERTIS-NIV√Ö DETEKTERING")
    print("=" * 50)
    
    try:
        from utils.ai_expert_integration import ai_expert_integration, AIExpertiseLevel
        
        # Test cases f√∂r olika expertis-niv√•er
        level_tests = [
            ("Vad √§r AI?", "BASIC"),
            ("F√∂rklara machine learning grunderna", "BASIC"),
            ("Hur deployar jag en ML-modell?", "INTERMEDIATE"),
            ("Implementera MLOps pipeline", "INTERMEDIATE"),
            ("AI transformation strategi f√∂r f√∂retag", "ADVANCED"),
            ("Organisationell AI-mognad assessment", "ADVANCED"),
            ("Transformer attention mechanism", "EXPERT"),
            ("State-of-the-art neural architecture", "EXPERT")
        ]
        
        for query, expected in level_tests:
            detected = ai_expert_integration.detect_expertise_level(query)
            status = "‚úÖ" if detected.value.upper() == expected else "‚ö†Ô∏è"
            
            # Emoji f√∂r niv√•
            level_emoji = {
                "BASIC": "üå±",
                "INTERMEDIATE": "üîß", 
                "ADVANCED": "üéØ",
                "EXPERT": "üß†"
            }
            
            emoji = level_emoji.get(detected.value.upper(), "‚ùì")
            print(f"   {status} {emoji} '{query}'")
            print(f"       -> {detected.value.upper()} (f√∂rv√§ntad: {expected})")
        
    except Exception as e:
        print(f"‚ùå Fel: {e}")

def demonstrate_coaching_integration():
    """Visa hur AI-expertis integreras med coaching"""
    print("\nüí° COACHING-INTEGRATION EXEMPEL")
    print("=" * 50)
    
    try:
        from utils.ai_expert_integration import ai_expert_integration
        
        # Exempel p√• persona enhancement
        base_persona = """Du √§r en personlig coach som hj√§lper med utveckling och m√•ls√§ttning.
Din approach √§r empatisk och fokuserar p√• att hj√§lpa anv√§ndaren hitta sina egna svar."""
        
        ai_query = "Hur kommer jag ig√•ng med machine learning?"
        normal_query = "Jag k√§nner mig stressad p√• jobbet"
        
        print("PERSONA F√ñRE AI-ENHANCEMENT:")
        print(f"   L√§ngd: {len(base_persona)} tecken")
        print(f"   Inneh√•ll: Grundl√§ggande coaching persona")
        
        # Test AI-fr√•ga
        enhanced_ai = ai_expert_integration.enhance_coaching_persona(
            base_persona, ai_query, "personal"
        )
        
        print(f"\nPERSONA EFTER AI-ENHANCEMENT (AI-fr√•ga):")
        print(f"   L√§ngd: {len(enhanced_ai)} tecken")
        print(f"   AI-expertis tillagd: {'Ja' if 'AI-Expertis Enhancement' in enhanced_ai else 'Nej'}")
        print(f"   Coaching approach bevarad: {'Ja' if 'coaching' in enhanced_ai.lower() else 'Nej'}")
        
        # Test normal fr√•ga
        enhanced_normal = ai_expert_integration.enhance_coaching_persona(
            base_persona, normal_query, "personal"
        )
        
        print(f"\nPERSONA EFTER ENHANCEMENT (normal fr√•ga):")
        print(f"   L√§ngd: {len(enhanced_normal)} tecken")
        print(f"   AI-expertis tillagd: {'Ja' if 'AI-Expertis Enhancement' in enhanced_normal else 'Nej'}")
        print(f"   Original persona bevarad: {'Ja' if enhanced_normal == base_persona else 'Nej'}")
        
    except Exception as e:
        print(f"‚ùå Fel: {e}")

def main():
    """K√∂r full demonstration"""
    print("üöÄ AI-COACHEN AI EXPERTIS DEMONSTRATION")
    print("=" * 60)
    print("Visar den nya AI-expertis funktionaliteten som implementerats")
    print("Live p√•: https://ai-coachen.online")
    print("=" * 60)
    
    # K√∂r alla demonstrationer
    demonstrate_ai_knowledge()
    demonstrate_rag_intelligence()
    demonstrate_expertise_levels() 
    demonstrate_coaching_integration()
    
    print("\n" + "=" * 60)
    print("üéä DEMONSTRATION SLUTF√ñRD")
    print("=" * 60)
    print("‚úÖ AI-kunskapsbas: Funktionell med 25+ dokument")
    print("‚úÖ RAG-system: Intelligent AI-fr√•ga identifiering")
    print("‚úÖ Expertis-niv√•er: Automatisk detektering")
    print("‚úÖ Coaching-integration: Seamless AI-expertis enhancement")
    print("\nüéØ AI-Coachen √§r nu en fullfj√§drad AI-expert!")
    print("üåê Testa live: https://ai-coachen.online")
    print("\nüìã TESTF√ñRSLAG:")
    print("   ‚Ä¢ 'Vad √§r machine learning?'")
    print("   ‚Ä¢ 'Hur implementerar jag MLOps?'")
    print("   ‚Ä¢ 'AI transformation roadmap f√∂r universitet?'")
    print("   ‚Ä¢ 'Transformer architecture f√∂rklaring'")

if __name__ == "__main__":
    main()