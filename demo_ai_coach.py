"""
Demo script f√∂r AI-Coachen
Visar funktionalitet utan att kr√§va API-nycklar
"""

import sys
import os
from datetime import datetime, timedelta

# L√§gg till projektroot till Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.personal_coach import PersonalCoach, PersonalGoalType, GoalStatus
from core.university_coach import UniversityAICoach, AIUseCase, StakeholderType, UniversityProfile, AIImplementationPhase

def demo_personal_coaching():
    """Demonstrera personlig coaching"""
    print("=" * 60)
    print("üß† PERSONAL COACHING DEMO")
    print("=" * 60)
    
    coach = PersonalCoach()
    
    print("\nüìù Skapar personliga utvecklingsm√•l...")
    
    # Skapa flera m√•l
    goal1 = coach.create_goal(
        title="L√§ra mig AI och Machine Learning",
        description="Bygga upp djup kompetens inom AI f√∂r att kunna implementera det p√• universitetet",
        goal_type=PersonalGoalType.LEARNING,
        target_date=datetime.now() + timedelta(days=180),
        completion_criteria="Slutf√∂ra online-kurs, bygga 3 projekt, f√• certifiering"
    )
    
    goal2 = coach.create_goal(
        title="Utveckla ledarskap f√∂r digital transformation",
        description="Bygga f√§rdigheter f√∂r att leda AI-implementering p√• organisationsniv√•",
        goal_type=PersonalGoalType.CAREER,
        target_date=datetime.now() + timedelta(days=120),
        completion_criteria="Genomf√∂ra ledarskapskurs, mentoring, framg√•ngsrik pilot-implementation"
    )
    
    goal3 = coach.create_goal(
        title="F√∂rb√§ttra work-life balance under f√∂r√§ndring",
        description="Beh√•lla v√§lm√•ende medan jag driver stora f√∂r√§ndringsprocesser",
        goal_type=PersonalGoalType.PERSONAL,
        target_date=datetime.now() + timedelta(days=90),
        completion_criteria="Etablera dagliga rutiner, minska stress, √∂ka energiniv√•"
    )
    
    print(f"‚úÖ Skapat m√•l: {goal1}")
    print(f"‚úÖ Skapat m√•l: {goal2}")
    print(f"‚úÖ Skapat m√•l: {goal3}")
    
    print("\nüìà Uppdaterar framsteg p√• m√•len...")
    
    # Simulera framsteg
    coach.update_goal_progress(goal1, 35, "Slutf√∂rde grundkurs i ML, b√∂rjade med f√∂rsta projektet")
    coach.update_goal_progress(goal2, 20, "P√•b√∂rjat ledarskapsprogram, identifierat mentorer")
    coach.update_goal_progress(goal3, 60, "Etablerat morgonrutin och mindfulness-praktik")
    
    # L√§gg till milstolpar
    coach.add_milestone(goal1, "Slutf√∂rde Coursera ML-kurs med betyg A")
    coach.add_milestone(goal1, "Byggde f√∂rsta ChatBot med Python")
    coach.add_milestone(goal2, "Fick godk√§nnande f√∂r AI-pilot p√• min avdelning")
    coach.add_milestone(goal3, "Genomf√∂rde f√∂rsta veckan med 7h s√∂mn per natt")
    
    print("‚úÖ Framsteg uppdaterat f√∂r alla m√•l")
    print("‚úÖ Milstolpar tillagda")
    
    print("\nü§î L√§gger till reflektioner...")
    
    # L√§gg till reflektioner
    coach.add_reflection(
        prompt="Vad har fungerat b√§st i min AI-inl√§rning hittills?",
        response="Hands-on projekt har varit mycket mer v√§rdefullt √§n bara teori. Att bygga n√•got konkret hj√§lper mig f√∂rst√• koncepten djupare.",
        mood_rating=8,
        energy_rating=7,
        insights="Praktisk till√§mpning √§r nyckeln till djup f√∂rst√•else"
    )
    
    coach.add_reflection(
        prompt="Hur hanterar jag stressen av att l√§ra mig snabbt?",
        response="Jag m√§rker att jag blir √∂verambiti√∂s och f√∂rs√∂ker l√§ra mig f√∂r mycket p√• en g√•ng. Beh√∂ver fokusera p√• kvalitet √∂ver kvantitet.",
        mood_rating=6,
        energy_rating=5,
        insights="Beh√∂ver b√§ttre balans mellan utmaning och √•terh√§mtning"
    )
    
    print("‚úÖ Reflektioner tillagda")
    
    print("\nüí° Genererar coaching-prompts baserat p√• din situation...")
    prompts = coach.generate_coaching_prompts()
    
    print("\nüéØ F√ñRESLAGNA COACHING-FR√ÖGOR:")
    for i, prompt in enumerate(prompts[:5], 1):
        print(f"{i}. {prompt}")
    
    print("\nüìä PROGRESS SAMMANFATTNING:")
    summary = coach.get_progress_summary()
    for key, value in summary.items():
        print(f"   {key}: {value}")
    
    print("\nüí≠ PERSONLIGA R√ÖD:")
    advice = coach.get_personalized_advice()
    for tip in advice:
        print(f"   üí° {tip}")
    
    print("\nüéâ Personal Coaching Demo slutf√∂rd!")

def demo_university_ai_coaching():
    """Demonstrera universitets AI-coaching"""
    print("\n\n" + "=" * 60)
    print("üéì UNIVERSITY AI COACHING DEMO")
    print("=" * 60)
    
    coach = UniversityAICoach()
    
    print("\nüèõÔ∏è S√§tter upp universitetsprofil...")
    
    # S√§tt universitetsprofil
    profile = UniversityProfile(
        name="Svenskt Universitet f√∂r Teknik och Innovation",
        size="Medium",
        research_focus=["Artificial Intelligence", "Sustainable Technology", "Digital Health", "Cybersecurity"],
        current_ai_maturity=4,  # P√• en skala 1-10
        budget_range="50-100M SEK",
        key_challenges=[
            "Bristande AI-kompetens bland faculty",
            "Fragmenterade datasystem",
            "Motst√•nd mot f√∂r√§ndring",
            "Begr√§nsade resurser f√∂r implementering",
            "Etiska och regulatoriska concerns"
        ],
        success_metrics=[
            "√ñkad forskningsproduktivitet",
            "F√∂rb√§ttrade studentresultat", 
            "Kostnadseffektivitet i administration",
            "Konkurrenskraft internationellt"
        ]
    )
    
    coach.set_university_profile(profile)
    print(f"‚úÖ Universitetsprofil satt f√∂r: {profile.name}")
    print(f"   AI-mognad: {profile.current_ai_maturity}/10")
    print(f"   Forskningsfokus: {', '.join(profile.research_focus)}")
    
    print("\nüöÄ Skapar AI-implementeringsprojekt...")
    
    # Skapa olika AI-projekt
    project1 = coach.create_project(
        title="Intelligent Forskningsassistent",
        description="AI-driven system f√∂r att hj√§lpa forskare hitta relevanta publikationer och identifiera samarbetsm√∂jligheter",
        use_case=AIUseCase.RESEARCH_ACCELERATION,
        stakeholders=[StakeholderType.RESEARCHERS, StakeholderType.IT_DEPARTMENT, StakeholderType.LEADERSHIP],
        target_completion=datetime.now() + timedelta(days=365)
    )
    
    project2 = coach.create_project(
        title="Adaptiv L√§rplattform",
        description="Personaliserad l√§rupplevelse som anpassar sig till studenters individuella behov och l√§rstilar",
        use_case=AIUseCase.PERSONALIZED_LEARNING,
        stakeholders=[StakeholderType.FACULTY, StakeholderType.STUDENTS, StakeholderType.IT_DEPARTMENT],
        target_completion=datetime.now() + timedelta(days=270)
    )
    
    project3 = coach.create_project(
        title="Smart Campus Operations",
        description="AI-optimering av campus-resurser: energif√∂rbrukning, s√§kerhet, och logistik",
        use_case=AIUseCase.ADMINISTRATIVE_AUTOMATION,
        stakeholders=[StakeholderType.ADMINISTRATION, StakeholderType.IT_DEPARTMENT],
        target_completion=datetime.now() + timedelta(days=180)
    )
    
    print(f"‚úÖ Skapat projekt: {project1}")
    print(f"‚úÖ Skapat projekt: {project2}")
    print(f"‚úÖ Skapat projekt: {project3}")
    
    print("\n‚ö° Avancerar projekt genom implementeringsfaser...")
    
    # Simulera projektframsteg
    coach.advance_project_phase(project3, "Slutf√∂rde teknisk feasibility study - mycket lovande resultat")
    coach.advance_project_phase(project3, "Godk√§nnande fr√•n IT och administration erh√•llet")
    coach.advance_project_phase(project2, "Pilotgrupp med 50 studenter identifierad och rekryterad")
    
    print("‚úÖ Projekt avancerade till n√§sta fas")
    
    print("\n‚ö†Ô∏è Identifierar och hanterar implementationsutmaningar...")
    
    # L√§gg till utmaningar
    challenge1 = coach.add_challenge(
        title="Faculty motst√•nd mot AI i undervisning",
        description="M√•nga l√§rare √§r oroliga att AI kommer att ers√§tta dem eller minska undervisningskvaliteten",
        category="Organizational",
        severity=8,
        stakeholders=[StakeholderType.FACULTY, StakeholderType.LEADERSHIP]
    )
    
    challenge2 = coach.add_challenge(
        title="Datas√§kerhet och integritet",
        description="Oro f√∂r hur studentdata och forskningsdata kommer att hanteras av AI-system",
        category="Ethical",
        severity=9,
        stakeholders=[StakeholderType.STUDENTS, StakeholderType.RESEARCHERS, StakeholderType.ADMINISTRATION]
    )
    
    challenge3 = coach.add_challenge(
        title="Budget och resursbegr√§nsningar",
        description="Begr√§nsad budget f√∂r AI-infrastruktur och kompetensuppbyggnad",
        category="Financial",
        severity=7,
        stakeholders=[StakeholderType.LEADERSHIP, StakeholderType.ADMINISTRATION]
    )
    
    print(f"‚ö†Ô∏è Utmaning identifierad: {challenge1}")
    print(f"‚ö†Ô∏è Utmaning identifierad: {challenge2}")
    print(f"‚ö†Ô∏è Utmaning identifierad: {challenge3}")
    
    # F√∂resl√• l√∂sningar
    coach.propose_solution(challenge1, "Organisera hands-on workshops d√§r faculty f√•r testa AI-verktyg som st√∂d snarare √§n ers√§ttning")
    coach.propose_solution(challenge1, "Skapa AI champions-program med early adopters som ambassad√∂rer")
    coach.propose_solution(challenge1, "Utveckla tydliga riktlinjer f√∂r n√§r och hur AI ska anv√§ndas i undervisning")
    
    coach.propose_solution(challenge2, "Implementera privacy-by-design principer i alla AI-system")
    coach.propose_solution(challenge2, "Skapa transparent datahanteringspolicy och f√• studentgodk√§nnande")
    coach.propose_solution(challenge2, "Anv√§nda federated learning f√∂r att minimera centraliserad datalagring")
    
    coach.propose_solution(challenge3, "Starta med small-scale piloter som visar ROI innan st√∂rre investeringar")
    coach.propose_solution(challenge3, "S√∂ka externa forskningsanslag f√∂r AI-implementering")
    coach.propose_solution(challenge3, "Partnerships med teknologif√∂retag f√∂r delad kostnad och expertis")
    
    print("‚úÖ L√∂sningar f√∂reslagna f√∂r alla utmaningar")
    
    print("\nüéØ Genererar coaching-prompts f√∂r universitets-context...")
    prompts = coach.generate_university_coaching_prompts()
    
    print("\nüìã UNIVERSITETS COACHING-FR√ÖGOR:")
    for i, prompt in enumerate(prompts[:5], 1):
        print(f"{i}. {prompt}")
    
    print("\nüó∫Ô∏è AI-IMPLEMENTERINGS ROADMAP:")
    roadmap = coach.get_implementation_roadmap()
    
    for phase in roadmap:
        print(f"\nüìÖ {phase['phase']} ({phase['duration']})")
        print("   Aktiviteter:")
        for activity in phase['activities']:
            print(f"   ‚Ä¢ {activity}")
        print("   Leverabler:")
        for deliverable in phase['deliverables']:
            print(f"   üìã {deliverable}")
    
    print("\nüìä IMPLEMENTERINGSSTATUS:")
    status = coach.get_implementation_status()
    for key, value in status.items():
        print(f"   {key}: {value}")
    
    print("\nüö® RISKANALYS OCH REKOMMENDATIONER:")
    risks = coach.get_risk_assessment()
    
    for risk_category in risks:
        print(f"\n‚ö†Ô∏è {risk_category['category']} Risker:")
        for risk in risk_category['risks']:
            print(f"   ‚Ä¢ {risk}")
        print("   √Ötg√§rder:")
        for mitigation in risk_category['mitigation']:
            print(f"   ‚úì {mitigation}")
    
    print("\nüéâ University AI Coaching Demo slutf√∂rd!")

def demo_stakeholder_strategies():
    """Demonstrera stakeholder-specifika strategier"""
    print("\n\n" + "=" * 60)
    print("üë• STAKEHOLDER STRATEGIER DEMO")
    print("=" * 60)
    
    coach = UniversityAICoach()
    
    stakeholders = [StakeholderType.FACULTY, StakeholderType.RESEARCHERS, StakeholderType.IT_DEPARTMENT, StakeholderType.ADMINISTRATION]
    
    for stakeholder in stakeholders:
        print(f"\nüéØ STRATEGI F√ñR: {stakeholder.value.upper()}")
        print("-" * 50)
        
        strategy = coach.get_stakeholder_strategy(stakeholder)
        
        if strategy:
            print("üìã Huvudconcerns:")
            for concern in strategy['key_concerns']:
                print(f"   ‚Ä¢ {concern}")
            
            print("\nü§ù Engagement Approach:")
            for approach in strategy['engagement_approach']:
                print(f"   ‚Ä¢ {approach}")
            
            print("\nüìà Success Metrics:")
            for metric in strategy['success_metrics']:
                print(f"   ‚Ä¢ {metric}")
        else:
            print("   Ingen specifik strategi tillg√§nglig")

def main():
    """K√∂r fullst√§ndig demo"""
    print("ü§ñüéì AI-COACHEN FUNKTIONALITETS-DEMO")
    print("Denna demo visar alla funktioner utan att kr√§va API-nycklar")
    print("\n" + "=" * 80)
    
    try:
        demo_personal_coaching()
        demo_university_ai_coaching()
        demo_stakeholder_strategies()
        
        print("\n\n" + "üéâ" * 20)
        print("DEMO SLUTF√ñRD FRAMG√ÖNGSRIKT!")
        print("üéâ" * 20)
        
        print(f"""
‚ú® SAMMANFATTNING AV AI-COACHEN:

üß† PERSONLIG COACHING:
   ‚Ä¢ M√•ls√§ttning och progress tracking
   ‚Ä¢ Reflektioner och sj√§lvutv√§rdering  
   ‚Ä¢ Personaliserade r√•d och coaching-prompts
   ‚Ä¢ Mood och energy tracking

üéì UNIVERSITETS AI-IMPLEMENTERING:
   ‚Ä¢ Strategisk planering och roadmap
   ‚Ä¢ Projekthantering genom implementeringsfaser
   ‚Ä¢ Utmaningsidentifiering och l√∂sningsf√∂rslag
   ‚Ä¢ Stakeholder-specifika strategier
   ‚Ä¢ Risk assessment och mitigation

üîÑ HYBRID FUNCTIONALITY:
   ‚Ä¢ Kombinerar personlig utveckling med AI-expertis
   ‚Ä¢ Hj√§lper dig b√•de som individ och som ledare
   ‚Ä¢ Integrerad approach f√∂r holistisk coaching

üìö N√ÑSTA STEG:
   1. S√§tt upp din OpenAI API-nyckel i .env filen
   2. K√∂r: streamlit run main.py
   3. B√∂rja din AI-coaching resa!

Lycka till med din AI-transformation! üöÄ
        """)
        
    except Exception as e:
        print(f"\n‚ùå Demo misslyckades: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()