#!/usr/bin/env python3
"""
Test script f√∂r AI Expert funktionalitet
Testar att AI-expertis integration fungerar korrekt utan extra API-kostnader
"""

import os
import sys
from dotenv import load_dotenv

# L√§gg till projektets root till path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Ladda environment variables
load_dotenv()

def test_ai_knowledge_base():
    """Testa att AI-kunskapsbasen laddas korrekt"""
    print("üß† Testar AI-kunskapsbasen...")
    
    try:
        from utils.ai_expert_knowledge import ai_expert_knowledge
        
        all_knowledge = ai_expert_knowledge.get_all_knowledge()
        
        print(f"‚úÖ AI-kunskapsbas laddad: {len(all_knowledge)} dokument")
        
        # Visa kategorier
        categories = set(doc['category'] for doc in all_knowledge)
        print(f"üìö Kategorier: {', '.join(categories)}")
        
        # Visa f√∂rsta dokumentet som exempel
        if all_knowledge:
            first_doc = all_knowledge[0]
            print(f"üìñ Exempel dokument: {first_doc['title']}")
            print(f"   Kategori: {first_doc['category']}")
            print(f"   Keywords: {first_doc['keywords'][:3]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Fel i AI-kunskapsbas: {e}")
        return False

def test_rag_system():
    """Testa RAG-systemet"""
    print("\nüîç Testar RAG-systemet...")
    
    try:
        from utils.rag_system import rag_system
        
        # Testa AI-fr√•ga identifiering
        ai_queries = [
            "Vad √§r machine learning?",
            "Hur implementerar jag en transformer?", 
            "AI transformation roadmap f√∂r universitet",
            "Hej, vad heter du?"  # Inte AI-relaterad
        ]
        
        for query in ai_queries:
            is_ai = rag_system.is_ai_related_query(query)
            print(f"{'ü§ñ' if is_ai else 'üí¨'} '{query[:30]}...' -> AI-relaterad: {is_ai}")
        
        # Testa kontext-h√§mtning
        ai_query = "Vad √§r transformer architecture?"
        contexts = rag_system.retrieve_relevant_context(ai_query)
        
        if contexts:
            print(f"‚úÖ H√§mtade {len(contexts)} relevanta kontexter f√∂r AI-fr√•ga")
            for i, ctx in enumerate(contexts, 1):
                print(f"   {i}. {ctx.title} (Score: {ctx.relevance_score:.2f})")
        else:
            print("‚ÑπÔ∏è  Inga kontexter h√§mtade (kan vara normalt f√∂r icke-AI fr√•gor)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Fel i RAG-system: {e}")
        return False

def test_ai_expert_integration():
    """Testa AI-expert integrationslagret"""
    print("\nüéØ Testar AI-expert integration...")
    
    try:
        from utils.ai_expert_integration import ai_expert_integration, AIExpertiseLevel
        
        # Testa expertisniv√•-detektering
        test_queries = [
            ("Vad √§r AI?", AIExpertiseLevel.BASIC),
            ("Hur deployar jag en ML-modell?", AIExpertiseLevel.INTERMEDIATE), 
            ("AI transformation roadmap", AIExpertiseLevel.ADVANCED),
            ("transformer attention mechanism", AIExpertiseLevel.EXPERT)
        ]
        
        for query, expected in test_queries:
            detected = ai_expert_integration.detect_expertise_level(query)
            status = "‚úÖ" if detected == expected else "‚ö†Ô∏è"
            print(f"{status} '{query}' -> {detected.value} (f√∂rv√§ntad: {expected.value})")
        
        # Testa persona enhancement
        base_persona = "Du √§r en personlig coach."
        ai_query = "Hur kommer jag ig√•ng med machine learning?"
        
        enhanced = ai_expert_integration.enhance_coaching_persona(base_persona, ai_query)
        
        if "AI-Expertis Enhancement" in enhanced:
            print("‚úÖ Persona f√∂rb√§ttrad med AI-expertis")
        else:
            print("‚ÑπÔ∏è  Persona inte f√∂rb√§ttrad (kan vara normalt f√∂r icke-AI fr√•gor)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Fel i AI-expert integration: {e}")
        return False

def test_full_ai_coach_integration():
    """Testa full AI-coach integration med AI-expertis"""
    print("\nü§ñ Testar full AI-coach integration...")
    
    # Kontrollera att API-nyckel finns
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ö†Ô∏è  Ingen OpenAI API-nyckel hittad - hoppar √∂ver API-test")
        return True
    
    try:
        from core.ai_coach import create_ai_coach, CoachingMode
        
        # Skapa AI-coach
        coach = create_ai_coach()
        
        # Starta session
        session_id = coach.start_session("test_user", CoachingMode.PERSONAL)
        print(f"‚úÖ AI-coach session startad: {session_id}")
        
        # Testa vanlig fr√•ga (ingen AI-expertis)
        normal_query = "Hur m√•r du idag?"
        response1, metadata1 = coach.get_response(normal_query)
        print(f"üí¨ Vanlig fr√•ga svar l√§ngd: {len(response1)} tecken")
        
        # Testa AI-fr√•ga (med AI-expertis)
        ai_query = "Vad √§r machine learning och hur kommer jag ig√•ng?"
        response2, metadata2 = coach.get_response(ai_query)
        print(f"üß† AI-fr√•ga svar l√§ngd: {len(response2)} tecken")
        
        # J√§mf√∂r tokens (borde vara ungef√§r samma)
        tokens1 = metadata1.get('tokens_used', 0)
        tokens2 = metadata2.get('tokens_used', 0)
        
        print(f"üìä Tokens: Vanlig fr√•ga={tokens1}, AI-fr√•ga={tokens2}")
        
        if abs(tokens1 - tokens2) < 500:  # Rimlig skillnad
            print("‚úÖ AI-expertis l√§gger inte till m√•nga extra tokens")
        else:
            print("‚ö†Ô∏è  Stor skillnad i token-anv√§ndning")
        
        # Avsluta session
        summary = coach.end_session()
        print(f"‚úÖ Session avslutad: {summary['message_count']} meddelanden")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Fel i full integration test: {e}")
        return False

def main():
    """K√∂r alla tester"""
    print("üöÄ AI Expert Integration Test Suite")
    print("=" * 50)
    
    tests = [
        test_ai_knowledge_base,
        test_rag_system, 
        test_ai_expert_integration,
        test_full_ai_coach_integration
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå Test {test.__name__} kraschade: {e}")
            results.append(False)
    
    print("\n" + "=" * 50)
    print("üìã TEST RESULTAT")
    print("=" * 50)
    
    passed = sum(results)
    total = len(results)
    
    test_names = [
        "AI Kunskapsbas",
        "RAG System", 
        "AI Expert Integration",
        "Full AI Coach Integration"
    ]
    
    for name, result in zip(test_names, results):
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {name}")
    
    print(f"\nüéØ TOTALT: {passed}/{total} tester godk√§nda")
    
    if passed == total:
        print("üéâ Alla tester godk√§nda! AI Expert-funktionalitet √§r redo.")
        return True
    else:
        print("‚ö†Ô∏è  Vissa tester misslyckades. Kontrollera loggar ovan.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)